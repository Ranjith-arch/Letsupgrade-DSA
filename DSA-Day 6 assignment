//Question 1

// Java program to implement a stack that supports 
// getMaximum() in O(1) time and O(1) extra space. 

import java.util.*; 

  

class GFG  
{ 

  
// A user defined stack that supports getMax() in 
// addition to push() and pop() 

static class MyStack  
{ 

    Stack<Integer> s = new Stack<Integer>(); 

    int maxEle; 

  

    // Prints maximum element of MyStack 

    void getMax() 

    { 

        if (s.empty()) 

            System.out.print("Stack is empty\n"); 

  

        // variable maxEle stores the maximum element 

        // in the stack. 

        else

            System.out.print("Maximum Element in" +  

                        "the stack is: "+maxEle + "\n"); 

  

    } 

  

    // Prints top element of MyStack 

    void peek() 

    { 

        if (s.empty()) 

        { 

              

            System.out.print("Stack is empty "); 

            return; 

        } 

  

        int t = s.peek(); // Top element. 

  

        System.out.print("Top Most Element is: "); 

  

        // If t < maxEle means maxEle stores 

        // value of t. 

        if(t > maxEle) 

            System.out.print(maxEle); 

        else

            System.out.print(t); 

    } 

  

    // Remove the top element from MyStack 

    void pop() 

    { 

        if (s.empty())  

        { 

            System.out.print("Stack is empty\n"); 

            return; 

        } 

  

        System.out.print("Top Most Element Removed: "); 

        int t = s.peek(); 

        s.pop(); 

  

        // Maximum will change as the maximum element 

        // of the stack is being removed. 

        if (t > maxEle) 

        { 

            System.out.print(maxEle + "\n"); 

            maxEle = 2 * maxEle - t; 

        } 

  

        else

            System.out.print(t + "\n"); 

    } 

  

    // Removes top element from MyStack 

    void push(int x) 

    { 

        // Insert new number into the stack 

        if (s.empty())  

        { 

            maxEle = x; 

            s.push(x); 

            System.out.print("Number Inserted: " + x + "\n"); 

            return; 

        } 

  

        // If new number is less than maxEle 

        if (x > maxEle)  

        { 

            s.push(2 * x - maxEle); 

            maxEle = x; 

        } 

  

        else

            s.push(x); 

  

        System.out.print("Number Inserted: " + x + "\n"); 

    } 
}; 

  
// Driver Code 

public static void main(String[] args)  
{ 

    MyStack s = new MyStack(); 

    s.push(3); 

    s.push(5); 

    s.getMax(); 

    s.push(7); 

    s.push(19); 

    s.getMax(); 

    s.pop(); 

    s.getMax(); 

    s.pop(); 

    s.peek(); 

    } 
} 

  Output:
Number Inserted: 3
Number Inserted: 5
Maximum Element in the stack is: 5
Number Inserted: 7
Number Inserted: 19
Maximum Element in the stack is: 19
Top Most Element Removed: 19
Maximum Element in the stack is: 7
Top Most Element Removed: 7
Top Most Element is: 5


//Question 2

import java.util.*; 

  
// A user defined stack that supports getMin() in 
// addition to push() and pop() 

class MyStack 
{ 

    Stack<Integer> s; 

    Integer minEle; 

  

    // Constructor 

    MyStack() { s = new Stack<Integer>(); } 

  

    // Prints minimum element of MyStack 

    void getMin() 

    { 

        // Get the minimum number in the entire stack 

        if (s.isEmpty()) 

            System.out.println("Stack is empty"); 

  

        // variable minEle stores the minimum element 

        // in the stack. 

        else

            System.out.println("Minimum Element in the " + 

                               " stack is: " + minEle); 

    } 

  

    // prints top element of MyStack 

    void peek() 

    { 

        if (s.isEmpty()) 

        { 

            System.out.println("Stack is empty "); 

            return; 

        } 

  

        Integer t = s.peek(); // Top element. 

  

        System.out.print("Top Most Element is: "); 

  

        // If t < minEle means minEle stores 

        // value of t. 

        if (t < minEle) 

            System.out.println(minEle); 

        else

            System.out.println(t); 

    } 

  

    // Removes the top element from MyStack 

    void pop() 

    { 

        if (s.isEmpty()) 

        { 

            System.out.println("Stack is empty"); 

            return; 

        } 

  

        System.out.print("Top Most Element Removed: "); 

        Integer t = s.pop(); 

  

        // Minimum will change as the minimum element 

        // of the stack is being removed. 

        if (t < minEle) 

        { 

            System.out.println(minEle); 

            minEle = 2*minEle - t; 

        } 

  

        else

            System.out.println(t); 

    } 

  

    // Insert new number into MyStack 

    void push(Integer x) 

    { 

        if (s.isEmpty()) 

        { 

            minEle = x; 

            s.push(x); 

            System.out.println("Number Inserted: " + x); 

            return; 

        } 

  

        // If new number is less than original minEle 

        if (x < minEle) 

        { 

            s.push(2*x - minEle); 

            minEle = x; 

        } 

  

        else

            s.push(x); 

  

        System.out.println("Number Inserted: " + x); 

    } 
}; 
// Driver Code 

public class Main 
{ 

    public static void main(String[] args) 

    { 

        MyStack s = new MyStack(); 

        s.push(3); 

        s.push(5); 

        s.getMin(); 

        s.push(2); 

        s.push(1); 

        s.getMin(); 

        s.pop(); 

        s.getMin(); 

        s.pop(); 

        s.peek(); 

    } 
} 

Output:
Number Inserted: 3
Number Inserted: 5
Minimum Element in the stack is: 3
Number Inserted: 2
Number Inserted: 1
Minimum Element in the stack is: 1
Top Most Element Removed: 1
Minimum Element in the stack is: 2
Top Most Element Removed: 2
Top Most Element is: 5
